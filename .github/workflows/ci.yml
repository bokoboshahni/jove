name: CI
on:
  pull_request:
    branches:
      - main
      - alpha
      - beta
      - rc
      - '*.x'
      - '*.*.x'
  push:
    branches:
      - main
      - alpha
      - beta
      - rc
      - '*.x'
      - '*.*.x'
  release:
    types: [published]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Install gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Run linters
        run: |
          bin/rubocop -P
          bin/erblint --lint-all

  security:
    name: Security
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run brakeman
        run: |
          bundle exec brakeman -q -w2

      - name: Run bundle-audit
        run: |
          bundle exec bundle-audit check --update

  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10ms
          --health-timeout 500ms
          --health-retries 15
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10ms
          --health-timeout 500ms
          --health-retries 15

    steps:
      - uses: browser-actions/setup-chrome@latest

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run tests
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: bin/ci-test

  docker-image:
    name: Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: bokoboshahni/jove
          tags: |
            type=edge,branch=main
            type=sha,prefix=edge-,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{version}}-alpine
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}-alpine
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=semver,pattern={{major}}-alpine,enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - docker-image
      - lint
      - security
      - test
    if: github.event_name != 'release' && needs.docker-image.result == 'success' && needs.lint.result == 'success' && needs.security.result == 'success' && needs.test.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Node
        uses: actions/setup-node@v3.1.1
        with:
          node-version: '16'

      - name: Release
        env:
          DRY_RUN: ${{ github.event_name == 'pull_request' && '--dry-run' || ' ' }}
          GIT_AUTHOR_NAME: "Bokobo Shahni"
          GIT_AUTHOR_EMAIL: "shahni@bokobo.space"
          GIT_COMMITTER_NAME: "Bokobo Shahni"
          GIT_COMMITTER_EMAIL: "shahni@bokobo.space"
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: bin/ci-release
